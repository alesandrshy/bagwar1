[1,["f8hTUx6n9LbZxSKfev1uUf","78fd+6W3lJ0ZC5yUH+f85f"],["node","root","buffAnim","data","_customMaterial","_effectAsset"],[["cc.Prefab",["_name"],2],["cc.Node",["_name","_layer","_children","_components","_prefab"],1,2,9,4],["cc.Node",["_name","_layer","_parent","_components","_prefab"],1,1,12,4],["cc.UITransform",["node","__prefab"],3,1,4],["cc.CompPrefabInfo",["fileId"],2],["e4fbbontQZJQKqOdVEUPix9",["node","__prefab","buffAnim"],3,1,4,1],["cc.Animation",["node","__prefab"],3,1,4],["cc.PrefabInfo",["fileId","instance","targetOverrides","nestedPrefabInstanceRoots","root","asset"],-1,1,1],["cc.Sprite",["_sizeMode","node","__prefab","_customMaterial"],2,1,4,6],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_props","_states","_defines"],-1]],[[4,0,2],[3,0,1,1],[6,0,1,1],[7,0,1,2,3,4,5,5],[0,0,2],[1,0,1,2,3,4,3],[2,0,1,2,3,4,3],[5,0,1,2,1],[8,0,1,2,3,2],[9,0,1,2,4],[10,0,1,2,3,5]],[[[[4,"monsterBuffItem"],[5,"monsterBuffItem",33554432,[-6],[[1,-2,[0,"d1yc2vmNZHQoyywbip6FJ0"]],[7,-4,[0,"a2LazeKxJKQ4Nw7ywj6SYZ"],-3],[2,-5,[0,"838sriSRFMhbI9l2LqKYyJ"]]],[3,"f5XDWYQ9FFcJ3TptC02cEm",null,null,null,-1,0]],[6,"icon",33554432,1,[[[1,-7,[0,"e1G8PKNqFCY73kWuZgMdsa"]],[8,0,-8,[0,"96uk239uJGk4yUFdfOUTE7"],0],-9],4,4,1],[3,"25e15Fp89Jtp8UPZB2Jl8o",null,null,null,1,0]],[2,2,[0,"e5U1Uip1lH5b9oatPoPxYv"]]],0,[0,1,1,0,0,1,0,2,3,0,0,1,0,0,1,0,-1,2,0,0,2,0,0,2,0,-3,3,0,3,1,9],[0],[4],[0]],[[[9,"../Res/Shade/Effect/monsterEff",[{"hash":2345116460,"name":"../Res/Shade/Effect/monsterEff|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"glow","stageFlags":16,"binding":1,"members":[{"name":"hitwhit","type":13,"count":1},{"name":"glowThreshold","type":13,"count":1}],"defines":["SHOW_INNER_GLOW"]}],"samplerTextures":[{"name":"noiceTx","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]},{"name":"a_uv0","format":21,"location":3,"defines":["USE_TEXTURE"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"glow","stageFlags":16,"binding":1,"members":[{"name":"hitwhit","type":13,"count":1},{"name":"glowThreshold","type":13,"count":1}],"defines":["SHOW_INNER_GLOW"]}],"samplerTextures":[{"name":"noiceTx","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 v_color;\nout vec2 v_uv0;\n#if USE_TEXTURE\n  in vec2 a_uv0;\n#endif\nvec4 vert (){\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_uv0 = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nuniform sampler2D noiceTx;\n#if SHOW_INNER_GLOW\n  layout(std140) uniform glow {\n    float hitwhit;\n    float glowThreshold;\n  };\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 white = vec4(1 , 1 ,1, 1);\n  vec4 burnColor = vec4(0, 0, 0.8, 1);\n  float vcolorA = v_color.a;\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n      o.a *= texture2D(cc_spriteTexture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  #if SHOW_INNER_GLOW\n    vec4 color_dest = o;\n    if(hitwhit > 0.){\n      if(color_dest.a > 0.02 ){\n        o = white * hitwhit + color_dest;\n      }else{\n        o = color_dest;\n      }\n    }\n    vec4 innerLightParam = vec4(1,1,1,1);\n    innerLightParam.r = o.a;\n    innerLightParam.g = 1. - abs(v_uv0.x - 0.5) * 0.5 ;\n    innerLightParam.b = 1. - abs(v_uv0.y - 0.5) * 0.5 ;\n    innerLightParam.a = innerLightParam.g * innerLightParam.b * 0.8;\n    if(innerLightParam.r < 0.08){\n        innerLightParam.a = 0.;\n    }\n    vec4 color_src = burnColor * innerLightParam.a;\n    if(v_color.r < 0.1){\n      o = color_src * color_src.a + color_dest;\n    }\n  #endif\n   vec3 result = mix(white.rgb, o.rgb,vcolorA);\n  o = vec4(result.rgb, o.a);\n  if(v_color.g != 1.){\n    float disFactor = 1.0;\n    disFactor *= step(o.b,v_color.g) * step(o.r, v_color.g) * step(o.g,v_color.g);\n    if(disFactor == 1.){\n      discard;\n    }\n    disFactor = 1.0;\n    disFactor *= step(v_color.g,0.2) * step(o.b,v_color.g+0.2);\n    o.rgb = mix(o.rgb, vec3(.2,.6,.2), disFactor);\n  }\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\n#if USE_TEXTURE\n  attribute vec2 a_uv0;\n#endif\nvec4 vert (){\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_uv0 = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nuniform sampler2D noiceTx;\n#if SHOW_INNER_GLOW\n       uniform float hitwhit;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 white = vec4(1 , 1 ,1, 1);\n  vec4 burnColor = vec4(0, 0, 0.8, 1);\n  float vcolorA = v_color.a;\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n      o.a *= texture2D(cc_spriteTexture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  #if SHOW_INNER_GLOW\n    vec4 color_dest = o;\n    if(hitwhit > 0.){\n      if(color_dest.a > 0.02 ){\n        o = white * hitwhit + color_dest;\n      }else{\n        o = color_dest;\n      }\n    }\n    vec4 innerLightParam = vec4(1,1,1,1);\n    innerLightParam.r = o.a;\n    innerLightParam.g = 1. - abs(v_uv0.x - 0.5) * 0.5 ;\n    innerLightParam.b = 1. - abs(v_uv0.y - 0.5) * 0.5 ;\n    innerLightParam.a = innerLightParam.g * innerLightParam.b * 0.8;\n    if(innerLightParam.r < 0.08){\n        innerLightParam.a = 0.;\n    }\n    vec4 color_src = burnColor * innerLightParam.a;\n    if(v_color.r < 0.1){\n      o = color_src * color_src.a + color_dest;\n    }\n  #endif\n   vec3 result = mix(white.rgb, o.rgb,vcolorA);\n  o = vec4(result.rgb, o.a);\n  if(v_color.g != 1.){\n    float disFactor = 1.0;\n    disFactor *= step(o.b,v_color.g) * step(o.r, v_color.g) * step(o.g,v_color.g);\n    if(disFactor == 1.){\n      discard;\n    }\n    disFactor = 1.0;\n    disFactor *= step(v_color.g,0.2) * step(o.b,v_color.g+0.2);\n    o.rgb = mix(o.rgb, vec3(.2,.6,.2), disFactor);\n  }\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":3}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"SHOW_INNER_GLOW","type":"boolean"},{"name":"IS_GRAY","type":"boolean"},{"name":"CC_USE_ALPHA_ATLAS_TEXTURE","type":"boolean"}]}],[{"passes":[{"program":"../Res/Shade/Effect/monsterEff|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"hitwhit":{"type":13,"value":[0]},"noiceTx":{"value":"white","type":28},"glowThreshold":{"type":13,"value":[0.1]}}}]}]]],0,0,[],[],[]],[[[10,"monsterEff",[{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}]]],0,0,[0],[5],[1]]]]
